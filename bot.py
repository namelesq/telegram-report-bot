import re
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from config import TOKEN, GROUP_CHAT_ID
from pytz import timezone

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
moscow = timezone("Europe/Moscow")
scheduler = AsyncIOScheduler(timezone=moscow)

report_data = {}

def validate_employee_line(line):
    return bool(re.match(r'^[–ê-–Ø–∞-—èA-Za-z—ë–Å\-]+\s[–ê-–Ø–∞-—èA-Za-z—ë–Å\-]\s*-\s*\d+/\d+/\d+$', line.strip()))

def calculate_efficiency(pays, calls):
    pay_eff = min(pays / 4 * 100, 100)
    call_eff = min(calls / 60 * 100, 100)
    return round((pay_eff + call_eff) / 2)

async def send_scheduled_report():
    if not report_data:
        await bot.send_message(GROUP_CHAT_ID, "‚ùóÔ∏è–ù–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—á—ë—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        return

    total_pays = total_calls = total_plan = total_eff = 0
    lines = []

    for name, (pays, calls, plan) in report_data.items():
        eff = calculate_efficiency(pays, calls)
        total_pays += pays
        total_calls += calls
        total_plan += plan
        total_eff += eff
        lines.append(f"{name} - {eff}%")

    avg_eff = round(total_eff / len(report_data), 2)
    avg_plan = round(total_plan / len(report_data))
    summary = f"\n–ò–¢–û–ì –§–ò–õ–ò–ê–õ–ê:\n{total_pays}/{total_calls}/{avg_plan}\n{avg_eff}%"
    final_message = '\n'.join(lines) + summary

    await bot.send_message(GROUP_CHAT_ID, final_message)
    report_data.clear()

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message):
    greeting = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –æ—Ç—á—ë—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
        "üì• –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–æ 18:30 –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–§–∞–º–∏–ª–∏—è –ò - X/Y/Z`\n\n"
        "üîπ X ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—Ç\n"
        "üîπ Y ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–æ–Ω–∫–æ–≤\n"
        "üîπ Z ‚Äî –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞\n\n"
        "üìå –ü—Ä–∏–º–µ—Ä:\n"
        "`–ò–≤–∞–Ω–æ–≤ –ò - 2/45/87`\n\n"
        "‚úÖ –í 18:30 —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ç–æ–≥ –≤ —Ä–∞–±–æ—á—É—é –≥—Ä—É–ø–ø—É.\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é –≤—ã–∑–≤–∞—Ç—å –æ—Ç—á—ë—Ç –∫–æ–º–∞–Ω–¥–æ–π /–æ—Ç—á–µ—Ç"
    )
    await message.reply(greeting, parse_mode="Markdown")

@dp.message_handler(commands=['chatid'])
async def get_chat_id(message: types.Message):
    await message.reply(f"üÜî Chat ID —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã: `{message.chat.id}`", parse_mode="Markdown")

@dp.message_handler(commands=['–æ—Ç—á–µ—Ç'])
async def manual_send_report(message: types.Message):
    await send_scheduled_report()
    await message.reply("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")

@dp.message_handler()
async def receive_report(message: types.Message):
    if message.chat.type != "private":
        return

    lines = message.text.strip().split('\n')
    temp_data = {}
    valid = True

    for line in lines:
        if not validate_employee_line(line):
            valid = False
            break
        try:
            name, stats = line.split('-')
            pays, calls, plan = map(int, stats.strip().split('/'))
            temp_data[name.strip()] = (pays, calls, plan)
        except:
            valid = False
            break

    if not valid:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏:\n`–§–∞–º–∏–ª–∏—è –ò - X/Y/Z`", parse_mode="Markdown")
        return

    report_data.update(temp_data)
    await message.reply("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ò—Ç–æ–≥ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ 18:30 –∏–ª–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /–æ—Ç—á–µ—Ç.")

async def on_startup(_):
    scheduler.add_job(send_scheduled_report, 'cron', hour=18, minute=30)
    scheduler.start()
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)